diff --git a/build/tools/build-wxwidgets.py b/build/tools/build-wxwidgets.py
index 7777b40..bab956d 100755
--- a/build/tools/build-wxwidgets.py
+++ b/build/tools/build-wxwidgets.py
@@ -46,7 +46,7 @@ def numCPUs():
         else: # OSX:
             p = subprocess.Popen("sysctl -n hw.ncpu", shell=True, stdout=subprocess.PIPE)
             return p.stdout.read()
-            
+
     # Windows:
     if "NUMBER_OF_PROCESSORS" in os.environ:
             ncpus = int(os.environ["NUMBER_OF_PROCESSORS"]);
@@ -71,7 +71,7 @@ def getVisCVersion():
     # TODO: Add more tests to get the other versions...
     else:
         return 'FIXME'
-    
+
 
 def exitIfError(code, msg):
     if code != 0:
@@ -80,23 +80,23 @@ def exitIfError(code, msg):
             raise builder.BuildError(msg)
         else:
             sys.exit(1)
-     
-            
+
+
 def getWxRelease(wxRoot=None):
     if not wxRoot:
         global wxRootDir
         wxRoot = wxRootDir
-        
+
     configureText = open(os.path.join(wxRoot, "configure.in"), "r").read()
     majorVersion = re.search("wx_major_version_number=(\d+)", configureText).group(1)
     minorVersion = re.search("wx_minor_version_number=(\d+)", configureText).group(1)
-    
+
     versionText = "%s.%s" % (majorVersion, minorVersion)
-    
+
     if int(minorVersion) % 2:
         releaseVersion = re.search("wx_release_number=(\d+)", configureText).group(1)
         versionText += ".%s" % (releaseVersion)
-    
+
     return versionText
 
 
@@ -107,7 +107,7 @@ def getFrameworkName(options):
         name += "Cocoa"
     else:
         name += "Carbon"
-    return name            
+    return name
 
 
 def getPrefixInFramework(options, wxRoot=None):
@@ -139,7 +139,7 @@ def macFixupInstallNames(destdir, prefix, buildDir=None):
                 cmd = 'install_name_tool -change %s/lib/%s %s/lib/%s %s/lib/%s' % \
                       (destdir+prefix,dep,  prefix,dep,  destdir+prefix,lib)
             print(cmd)
-            run(cmd)        
+            run(cmd)
     os.chdir(pwd)
 
 
@@ -163,7 +163,7 @@ def getoutput(cmd):
         print("Command '%s' failed with exit code %d." % (cmd, rval))
         sys.exit(rval)
     return output
-    
+
 
 def main(scriptName, args):
     global scriptDir
@@ -173,27 +173,27 @@ def main(scriptName, args):
     global configure_opts
     global wxBuilder
     global nmakeCommand
-    
+
     scriptDir = os.path.dirname(os.path.abspath(scriptName))
     wxRootDir = os.path.abspath(os.path.join(scriptDir, "..", ".."))
-    
+
     contribDir = os.path.join("contrib", "src")
     installDir = None
 
     VERSION = tuple([int(i) for i in getWxRelease().split('.')[:2]])
-    
+
     if sys.platform.startswith("win"):
         contribDir = os.path.join(wxRootDir, "contrib", "build")
-    
+
     if sys.platform.startswith("win"):
         toolkit = "msvc"
     else:
         toolkit = "autoconf"
-    
+
     defJobs = str(numCPUs())
     defFwPrefix = '/Library/Frameworks'
-    
-    option_dict = { 
+
+    option_dict = {
         "clean"         : (False, "Clean all files from the build directory"),
         "debug"         : (False, "Build the library in debug symbols"),
         "builddir"      : ("", "Directory where the build will be performed for autoconf builds."),
@@ -203,10 +203,10 @@ def main(scriptName, args):
         "installdir"    : ("", "Directory where built wxWidgets will be installed"),
         "gtk3"          : (False, "On Linux build for gtk3 (default gtk2)"),
         "mac_distdir"   : (None, "If set on Mac, will create an installer package in the specified dir."),
-        "mac_universal_binary" 
+        "mac_universal_binary"
                         : ("", "Comma separated list of architectures to include in the Mac universal binary"),
         "mac_framework" : (False, "Install the Mac build as a framework"),
-        "mac_framework_prefix" 
+        "mac_framework_prefix"
                         : (defFwPrefix, "Prefix where the framework should be installed. Default: %s" % defFwPrefix),
         "cairo"         : (False, "Enable dynamically loading the Cairo lib for wxGraphicsContext on MSW"),
         "no_config"     : (False, "Turn off configure step on autoconf builds"),
@@ -222,7 +222,7 @@ def main(scriptName, args):
         "verbose"       : (False, "Print commands as they are run, (to aid with debugging this script)"),
         "jom"           : (False, "Use jom.exe instead of nmake for MSW builds."),
     }
-        
+
     parser = optparse.OptionParser(usage="usage: %prog [options]", version="%prog 1.0")
 
     keys = option_dict.keys()
@@ -231,39 +231,39 @@ def main(scriptName, args):
         action = "store"
         if type(default) == bool:
             action = "store_true"
-        parser.add_option("--" + opt, default=default, action=action, dest=opt, 
+        parser.add_option("--" + opt, default=default, action=action, dest=opt,
                           help=option_dict[opt][1])
-    
+
     options, arguments = parser.parse_args(args=args)
 
     global verbose
     if options.verbose:
         verbose = True
-        
+
     # compiler / build system specific args
     buildDir = options.builddir
     args = []
     installDir = options.installdir
     prefixDir = options.prefix
-    
+
     if toolkit == "autoconf":
         if not buildDir:
             buildDir = os.getcwd()
         configure_opts = []
         if options.features != "":
             configure_opts.extend(options.features.split(" "))
-        
+
         if options.unicode:
             configure_opts.append("--enable-unicode")
-            
+
         if options.debug:
             configure_opts.append("--enable-debug")
-            
+
         if options.osx_cocoa:
             configure_opts.append("--with-osx_cocoa")
         elif options.osx_carbon:
             configure_opts.append("--with-osx_carbon")
-            
+
         if options.gtk3:
             configure_opts.append("--with-gtk=3")
 
@@ -271,7 +271,6 @@ def main(scriptName, args):
                             "--with-opengl",
                             "--enable-sound",
                             "--enable-graphics_ctx",
-                            "--enable-mediactrl",
                             "--enable-display",
                             "--enable-geometry",
                             "--enable-debug_flag",
@@ -298,7 +297,7 @@ def main(scriptName, args):
                     xcodePath+"/SDKs/MacOSX10.7.sdk",
                     xcodePath+"/SDKs/MacOSX10.8.sdk",
                     ]
-            
+
                 # use the lowest available sdk
                 for sdk in sdks:
                     if os.path.exists(sdk):
@@ -312,8 +311,8 @@ def main(scriptName, args):
             if prefixDir:
                 prefixDir = os.path.abspath(prefixDir)
                 configure_opts.append("--prefix=" + prefixDir)
-                             
-        
+
+
         if options.wxpython:
             configure_opts.extend(wxpy_configure_opts)
             if options.debug:
@@ -321,16 +320,16 @@ def main(scriptName, args):
                 configure_opts.append("--enable-debug_gdb")
                 configure_opts.append("--disable-optimise")
                 configure_opts.remove("--enable-optimise")
-                
-    
+
+
         if options.rebake:
             retval = run("make -f autogen.mk")
             exitIfError(retval, "Error running autogen.mk")
-            
+
         if options.mac_framework:
             # TODO: Should options.install be automatically turned on if the
             # mac_framework flag is given?
-            
+
             # framework builds always need to be monolithic
             if not "--enable-monolithic" in configure_opts:
                 configure_opts.append("--enable-monolithic")
@@ -339,7 +338,7 @@ def main(scriptName, args):
             # plus the framework specific dir structure.
             prefixDir = getPrefixInFramework(options)
             configure_opts.append("--prefix=" + prefixDir)
-            
+
             # the framework build adds symlinks above the installDir + prefixDir folder
             # so we need to wipe from the framework root instead of inside the prefixDir.
             frameworkRootDir = os.path.abspath(os.path.join(installDir + prefixDir, "..", ".."))
@@ -347,30 +346,30 @@ def main(scriptName, args):
                 if os.path.exists(frameworkRootDir):
                     shutil.rmtree(frameworkRootDir)
 
-        if options.mac_universal_binary: 
+        if options.mac_universal_binary:
             if options.mac_universal_binary == 'default':
                 if options.osx_cocoa:
-                    configure_opts.append("--enable-universal_binary=i386,x86_64")                
+                    configure_opts.append("--enable-universal_binary=i386,x86_64")
                 else:
-                    configure_opts.append("--enable-universal_binary")                
+                    configure_opts.append("--enable-universal_binary")
             else:
                 configure_opts.append("--enable-universal_binary=%s" % options.mac_universal_binary)
 
-            
+
         print("Configure options: " + repr(configure_opts))
         wxBuilder = builder.AutoconfBuilder()
         if not options.no_config and not options.clean:
             olddir = os.getcwd()
             if buildDir:
                 os.chdir(buildDir)
-            exitIfError(wxBuilder.configure(dir=wxRootDir, options=configure_opts), 
+            exitIfError(wxBuilder.configure(dir=wxRootDir, options=configure_opts),
                         "Error running configure")
             os.chdir(olddir)
 
         if options.config_only:
             print("Exiting after configure")
             return
-    
+
     elif toolkit in ["msvc", "msvcProject"]:
         flags = {}
         buildDir = os.path.abspath(os.path.join(scriptDir, "..", "msw"))
@@ -380,12 +379,12 @@ def main(scriptName, args):
             flags["wxUSE_UNICODE"] = "1"
             if VERSION < (2,9):
                 flags["wxUSE_UNICODE_MSLU"] = "1"
-    
+
         if options.cairo:
             if not os.environ.get("CAIRO_ROOT"):
                 print("WARNING: Expected CAIRO_ROOT set in the environment!")
             flags["wxUSE_CAIRO"] = "1"
-    
+
         if options.wxpython:
             flags["wxDIALOG_UNIT_COMPATIBILITY "] = "0"
             flags["wxUSE_DEBUGREPORT"] = "0"
@@ -400,24 +399,24 @@ def main(scriptName, args):
             # Remove this when Windows XP finally dies, or when there is a
             # solution for ticket #13116...
             flags["wxUSE_COMPILER_TLS"] = "0"
-            
+
             if VERSION < (2,9):
                 flags["wxUSE_DIB_FOR_BITMAP"] = "1"
 
             if VERSION >= (2,9):
                 flags["wxUSE_UIACTIONSIMULATOR"] = "1"
 
-    
+
         mswIncludeDir = os.path.join(wxRootDir, "include", "wx", "msw")
         setup0File = os.path.join(mswIncludeDir, "setup0.h")
         setupText = open(setup0File, "rb").read()
-        
+
         for flag in flags:
             setupText, subsMade = re.subn(flag + "\s+?\d", "%s %s" % (flag, flags[flag]), setupText)
             if subsMade == 0:
                 print("Flag %s wasn't found in setup0.h!" % flag)
                 sys.exit(1)
-    
+
         setupFile = open(os.path.join(mswIncludeDir, "setup.h"), "wb")
         setupFile.write(setupText)
         setupFile.close()
@@ -429,7 +428,7 @@ def main(scriptName, args):
                 args.append("UNICODE=1")
                 if VERSION < (2,9):
                     args.append("MSLU=1")
-    
+
             if options.wxpython:
                 args.append("OFFICIAL_BUILD=1")
                 args.append("COMPILER_VERSION=%s" % getVisCVersion())
@@ -437,12 +436,12 @@ def main(scriptName, args):
                 args.append("MONOLITHIC=0")
                 args.append("USE_OPENGL=1")
                 args.append("USE_GDIPLUS=1")
-                
+
                 if not options.debug:
                     args.append("BUILD=release")
                 else:
                     args.append("BUILD=debug")
-                   
+
             if options.shared:
                 args.append("SHARED=1")
 
@@ -450,61 +449,61 @@ def main(scriptName, args):
                 args.append(
                     "CPPFLAGS=/I%s" %
                      os.path.join(os.environ.get("CAIRO_ROOT", ""), 'include\\cairo'))
-                
+
             if options.jom:
                 nmakeCommand = 'jom.exe'
-    
+
             wxBuilder = builder.MSVCBuilder(commandName=nmakeCommand)
-            
+
         if toolkit == "msvcProject":
             args = []
             if options.shared or options.wxpython:
                 args.append("wx_dll.dsw")
             else:
                 args.append("wx.dsw")
-                
+
             # TODO:
             wxBuilder = builder.MSVCProjectBuilder()
-        
-            
+
+
     if not wxBuilder:
         print("Builder not available for your specified platform/compiler.")
         sys.exit(1)
-    
+
     if options.clean:
         print("Performing cleanup.")
         wxBuilder.clean(dir=buildDir, options=args)
-        
+
         sys.exit(0)
 
     if options.extra_make:
         args.append(options.extra_make)
-     
+
     if not sys.platform.startswith("win"):
         args.append("--jobs=" + options.jobs)
     exitIfError(wxBuilder.build(dir=buildDir, options=args), "Error building")
-        
+
     if options.install:
         extra=None
         if installDir:
             extra = ['DESTDIR='+installDir]
-        wxBuilder.install(dir=buildDir, options=extra)             
-            
+        wxBuilder.install(dir=buildDir, options=extra)
+
     if options.install and options.mac_framework:
-    
+
         def renameLibrary(libname, frameworkname):
             reallib = libname
             links = []
             while os.path.islink(reallib):
                 links.append(reallib)
                 reallib = "lib/" + os.readlink(reallib)
-                
+
             #print("reallib is %s" % reallib)
             run("mv -f %s lib/%s.dylib" % (reallib, frameworkname))
-            
+
             for link in links:
                 run("ln -s -f %s.dylib %s" % (frameworkname, link))
-    
+
         frameworkRootDir = prefixDir
         if installDir:
             print("installDir = %s" % installDir)
@@ -519,7 +518,7 @@ def main(scriptName, args):
         version_full = getoutput("bin/wx-config --version")
         basename = getoutput("bin/wx-config --basename")
         configname = getoutput("bin/wx-config --selected-config")
-        
+
         os.makedirs("Resources")
         wxplist = dict(
             CFBundleDevelopmentRegion="English",
@@ -533,26 +532,26 @@ def main(scriptName, args):
             CFBundleShortVersionString=version_full,
             CFBundleInfoDictionaryVersion="6.0",
         )
-        
+
         import plistlib
         plistlib.writePlist(wxplist, os.path.join(frameworkRootDir, "Resources", "Info.plist"))
-        
+
         # we make wx the "actual" library file and link to it from libwhatever.dylib
         # so that things can link to wx and survive minor version changes
         renameLibrary("lib/lib%s-%s.dylib" % (basename, version), fwname)
         run("ln -s -f lib/%s.dylib %s" % (fwname, fwname))
-        
+
         run("ln -s -f include Headers")
-        
-        for lib in ["GL", "STC", "Gizmos", "Gizmos_xrc"]:  
+
+        for lib in ["GL", "STC", "Gizmos", "Gizmos_xrc"]:
             libfile = "lib/lib%s_%s-%s.dylib" % (basename, lib.lower(), version)
             if os.path.exists(libfile):
                 frameworkDir = "framework/wx%s/%s" % (lib, version)
                 if not os.path.exists(frameworkDir):
                     os.makedirs(frameworkDir)
                 renameLibrary(libfile, "wx" + lib)
-                run("ln -s -f ../../../%s %s/wx%s" % (libfile, frameworkDir, lib))        
-        
+                run("ln -s -f ../../../%s %s/wx%s" % (libfile, frameworkDir, lib))
+
         for lib in glob.glob("lib/*.dylib"):
             if not os.path.islink(lib):
                 corelibname = "lib/lib%s-%s.0.dylib" % (basename, version)
@@ -560,8 +559,8 @@ def main(scriptName, args):
                 run("install_name_tool -change %s %s %s" % (os.path.join(frameworkRootDir, corelibname), os.path.join(prefixDir, corelibname), lib))
 
         os.chdir("include")
-        
-        header_template = """        
+
+        header_template = """
 #ifndef __WX_FRAMEWORK_HEADER__
 #define __WX_FRAMEWORK_HEADER__
 
@@ -573,42 +572,42 @@ def main(scriptName, args):
         header_dir = "wx-%s/wx" % version
         for include in glob.glob(header_dir + "/*.h"):
             headers += "#include <wx/" + os.path.basename(include) + ">\n"
-            
+
         framework_header = open("%s.h" % fwname, "w")
         framework_header.write(header_template % headers)
         framework_header.close()
-        
+
         run("ln -s -f %s wx" % header_dir)
         os.chdir("wx-%s/wx" % version)
         run("ln -s -f ../../../lib/wx/include/%s/wx/setup.h setup.h" % configname)
-        
+
         os.chdir(os.path.join(frameworkRootDir, ".."))
         run("ln -s -f %s Current" % getWxRelease())
         os.chdir("..")
         run("ln -s -f Versions/Current/Headers Headers")
         run("ln -s -f Versions/Current/Resources Resources")
         run("ln -s -f Versions/Current/%s %s" % (fwname, fwname))
-        
+
         # sanity check to ensure the symlink works
         os.chdir("Versions/Current")
-    
+
         # put info about the framework into wx-config
         os.chdir(frameworkRootDir)
         text = file('lib/wx/config/%s' % configname).read()
         text = text.replace("MAC_FRAMEWORK=", "MAC_FRAMEWORK=%s" % getFrameworkName(options))
         if options.mac_framework_prefix not in ['/Library/Frameworks',
                                                 '/System/Library/Frameworks']:
-            text = text.replace("MAC_FRAMEWORK_PREFIX=", 
+            text = text.replace("MAC_FRAMEWORK_PREFIX=",
                          "MAC_FRAMEWORK_PREFIX=%s" % options.mac_framework_prefix)
         file('lib/wx/config/%s' % configname, 'w').write(text)
-        
+
         # The framework is finished!
-        print("wxWidgets framework created at: " + 
-              os.path.join( installDir, 
+        print("wxWidgets framework created at: " +
+              os.path.join( installDir,
                             options.mac_framework_prefix,
                             '%s.framework' % fwname))
-        
-        
+
+
     # adjust the install_name if needed
     if sys.platform.startswith("darwin") and \
            options.install and \
@@ -627,7 +626,7 @@ def main(scriptName, args):
 
         if os.path.exists(options.mac_distdir):
             shutil.rmtree(options.mac_distdir)
-        
+
         packagedir = os.path.join(options.mac_distdir, "packages")
         os.makedirs(packagedir)
         basename = os.path.basename(prefixDir.split(".")[0])
@@ -642,14 +641,13 @@ def main(scriptName, args):
         cmd = packageMakerPath + ' '.join(args)
         print("cmd = %s" % cmd)
         run(cmd)
-        
+
         os.chdir(options.mac_distdir)
-        
+
         run('hdiutil create -srcfolder %s -volname "%s" -imagekey zlib-level=9 %s.dmg' % (packagedir, packageName, packageName))
-        
+
         shutil.rmtree(packagedir)
-        
+
 if __name__ == '__main__':
     exitWithException = False  # use sys.exit instead
     main(sys.argv[0], sys.argv[1:])
-    
